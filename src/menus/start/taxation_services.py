
from botmanlib.menus import OneListMenu
from botmanlib.menus.helpers import group_buttons

from telegram import InlineKeyboardButton
from telegram.ext import CallbackQueryHandler

from src.models import TaxationService, DBSession
# from src.menus.start. import PlayersMenu
# from src.menus.start. import UserTeamGamesMenu


class TaxationServiceMenu(OneListMenu):
    menu_name = 'taxation_service_menu'
    model = TaxationService
    auto_hide_arrows = True

    def entry(self, update, context):
        return super(TaxationServiceMenu, self).entry(update, context)

    def query_objects(self, context):
        return DBSession.query(TaxationService).all()

    def entry_points(self):
        return [CallbackQueryHandler(self.entry, pattern='^taxation_services$')]

    def message_text(self, context, obj):

        if obj:
            message_text = "–û—Ç–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–ª—É–∂–±" + '\n'
            message_text += f"–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è: {obj.id}" + '\n'
            message_text += f"–¢–∏–ø: {obj.type.to_str()}" + '\n'
            message_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {obj.name}" + '\n'
            message_text += f"–ì–æ—Ä–æ–¥: {obj.city}" + '\n'
            message_text += f"–†–∞–±–æ—Ç–∞–µ—Ç —Å: {obj.year}" + '\n'
            message_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {obj.phone}" + '\n'
            message_text += f"–ê–¥—Ä–µ—Å: {obj.address}" + '\n'

        else:
            message_text = "–ù–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–ª—É–∂–±–∞—Ö!" + '\n'

        return message_text

    def back_button(self, context):
        return InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_{self.menu_name}")

    def object_buttons(self, context, obj):
        buttons = []

        if obj:
            buttons.append(InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤", callback_data='taxation_payments'))
            buttons.append(InlineKeyboardButton("–†–∞–±–æ—Ç–Ω–∏–∫–∏ —Å–ª—É–∂–±—ã", callback_data='service_employees'))
        return group_buttons(buttons, 1)

    def additional_states(self):

        return {
            self.States.ACTION: []
        }
