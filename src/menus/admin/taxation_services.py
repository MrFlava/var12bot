import enum
import datetime

from botmanlib.validators import PhoneNumber
from botmanlib.menus import OneListMenu, ArrowAddEditMenu
from botmanlib.menus.helpers import add_to_db, group_buttons
from botmanlib.messages import send_or_edit

from formencode import validators

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, ConversationHandler

from src.models import TaxationService, DBSession, ServiceType
# from src.menus.admin. import
# from src.menus.admin. import


def delete_refresh_job(context):
    user_id = context.user_data['user'].id
    for job in context.job_queue.get_jobs_by_name(f"refresh_services_menu_job_{user_id}"):
        job.schedule_removal()


class ServicesMenu(OneListMenu):
    menu_name = "services_menu"

    class States(enum.Enum):
        ACTION = 1
        ASK_TYPE = 2

    def entry(self, update, context):
        return super(ServicesMenu, self).entry(update, context)

    def query_objects(self, context):
        return DBSession.query(TaxationService).all()

    def entry_points(self):
        return [CallbackQueryHandler(self.entry, pattern='^taxation_services$', pass_user_data=True)]

    def message_text(self, context, obj):

        if obj:
            message_text = "–û—Ç–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–ª—É–∂–±" + '\n'
            message_text += f"–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è: {obj.id}" + '\n'
            message_text += f"–¢–∏–ø: {obj.type.to_str()}" + '\n'
            message_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {obj.name}" + '\n'
            message_text += f"–ì–æ—Ä–æ–¥: {obj.city}" + '\n'
            message_text += f"–†–∞–±–æ—Ç–∞–µ—Ç —Å: {obj.year}" + '\n'
            message_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {obj.phone}" + '\n'
            message_text += f"–ê–¥—Ä–µ—Å: {obj.address}" + '\n'
        else:
            message_text = "–ù–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–ª—É–∂–±–∞—Ö!" + '\n'

        return message_text

    def delete_ask(self, update, context):
        return super(ServicesMenu, self).delete_ask(update, context)

    def center_buttons(self, context, o=None):
        buttons = []
        buttons.append(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤—É—é —Å–ª—É–∂–±—É", callback_data="add_service"))
        if o:
            buttons.append(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã", callback_data="edit_service"))
        return buttons

    def back_button(self, context):
        return InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_{self.menu_name}")

    def object_buttons(self, context, obj):

        buttons = []

        if obj:
                buttons.append(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Å–ª—É–∂–±—ã", callback_data='change_type'))
                buttons.append(InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤", callback_data='taxation_payments'))
                buttons.append(InlineKeyboardButton("–†–∞–±–æ—Ç–Ω–∏–∫–∏ —Å–ª—É–∂–±—ã", callback_data='service_employees'))
                buttons.append(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª—É–∂–±—É", callback_data=f"delete_{self.menu_name}"))
        return group_buttons(buttons, 1)

    def ask_change_type(self, update, context):
        delete_refresh_job(context)
        user = context.user_data['user']
        buttons = []
        message_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø"
        obj = self.selected_object(context)
        if obj:
            buttons.append([InlineKeyboardButton("–ì–æ—Ä–æ–¥—Å–∫–∞—è —Å–ª—É–∂–±–∞", callback_data='type_urban')])
            buttons.append([InlineKeyboardButton("–†–∞–π–æ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞", callback_data='type_district')])
            buttons.append([InlineKeyboardButton("–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞", callback_data='type_regional')])
            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'back_to_service')])
            send_or_edit(context, chat_id=user.chat_id, text=message_text, reply_markup=InlineKeyboardMarkup(buttons, resize_keyboard=True))

        return self.States.ASK_TYPE

    def set_change_type(self, update, context):
        type_str = update.callback_query.data.replace("type_", "")
        obj = self.selected_object(context)
        obj.type = ServiceType[type_str]
        if not add_to_db(obj):
            return self.conv_fallback(context)
        self.send_message(context)
        return self.States.ACTION

    def back_to_service(self, update, context):
        self.send_message(context)
        return self.States.ACTION

    def additional_states(self):

        add_service = ServiceAddMenu(self)
        edit_service = ServiceEditMenu(self)
        return {self.States.ACTION: [add_service.handler,
                                     edit_service.handler,
                                     CallbackQueryHandler(self.ask_change_type, pattern='^change_type$')
                                     ],
                self.States.ASK_TYPE: [CallbackQueryHandler(self.back_to_service, pattern='^back_to_service$'),
                                       CallbackQueryHandler(self.set_change_type, pattern='^type_(urban|district|regional)$')]}

    def after_delete_text(self, context):
        return "–°–ª—É–∂–±–∞ —É–¥–∞–ª–µ–Ω–∞"


class ServiceAddMenu(ArrowAddEditMenu):
    menu_name = 'service_add_menu'
    model = TaxationService

    def entry(self, update, context):
        return super(ServiceAddMenu, self).entry(update, context)

    def query_object(self, context):
        return None

    def fields(self, context):
        year = datetime.datetime.now().year
        fields = [self.Field('name', "*–ù–∞–∑–≤–Ω–∞–∏–µ", validators.String(), required=True),
                  self.Field('city', "*–ì–æ—Ä–æ–¥", validators.String(), required=True),
                  self.Field('year', "*–†–∞–±–æ—Ç–∞–µ—Ç —Å", validators.Number(min=1, max=year), required=True, default=0),
                  self.Field('phone', "*–¢–µ–ª–µ—Ñ–æ–Ω", PhoneNumber, required=True),
                  self.Field('address', "*–ê–¥—Ä–µ—Å", validators.String(), required=True)]
        return fields

    def entry_points(self):
        return [CallbackQueryHandler(self.entry, pattern="^add_service$")]

    def save_object(self, obj, context, session=None):
        user_data = context.user_data
        obj.name = user_data[self.menu_name]['name']
        obj.city = user_data[self.menu_name]['city']
        obj.year = user_data[self.menu_name]['year']
        obj.phone = user_data[self.menu_name]['phone']
        obj.address = user_data[self.menu_name]['address']

        if not add_to_db(obj, session):
            return self.conv_fallback(context)


class ServiceEditMenu(ArrowAddEditMenu):
    menu_name = 'service_edit_menu'
    model = TaxationService

    def entry(self, update, context):
        return super(ServiceEditMenu, self).entry(update, context)

    def query_object(self, context):

        service = self.parent.selected_object(context)
        if service:
            return DBSession.query(TaxationService).filter(TaxationService.id == service.id).first()
        else:
            self.parent.update_objects(context)
            self.parent.send_message(context)
            return ConversationHandler.END

    def fields(self, context):
        year = datetime.datetime.now().year
        fields = [self.Field('name', "*–ù–∞–∑–≤–Ω–∞–∏–µ", validators.String(), required=True),
                  self.Field('city', "*–ì–æ—Ä–æ–¥", validators.String(), required=True),
                  self.Field('year', "*–†–∞–±–æ—Ç–∞–µ—Ç —Å", validators.Number(min=1, max=year), required=True, default=0),
                  self.Field('phone', "*–¢–µ–ª–µ—Ñ–æ–Ω", PhoneNumber, required=True),
                  self.Field('address', "*–ê–¥—Ä–µ—Å", validators.String(), required=True)]
        return fields

    def entry_points(self):
        return [CallbackQueryHandler(self.entry, pattern='^edit_service$')]




